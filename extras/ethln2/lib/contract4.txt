
pragma solidity ^0.4.16;

contract ValidateSaito {
    
    address owner;

    // provided at contract initialization
    uint number_of_participants;
    mapping (uint => string)    private public_keys;
    mapping (uint => uint)      private coin_distribution;
    mapping (uint => uint)      private coin_distribution_idx;

    mapping (uint => string)    private submitted_sig;
    mapping (uint => uint)      private submitted_dist;
    mapping (uint => bytes32)      private submitted_dist_bytes32;
    mapping (uint => uint)      private submitted_idx;
    mapping (uint => bytes32)   private submitted_idx_bytes32;


    bytes32 m       = 0xafa683ca78e466e120163fd97174907382fccd2a6946e9cbdff907c7cee2dc06;
    bytes32 r       = 0x796c96382e06fa54b4b425f26b8645a43f5cdcb2375f7c586a0b5d01aa8e1efa; 
    bytes32 s       = 0x0fded7b2942022d3a409240689294205ba26df0dc216b221fab19c3de9638d3e;

    string message = "THIS IS OUR MESSAGE";
    
    
    function ValidateSaito() {
        owner = msg.sender;
    }

    //
    // initialize
    //
    // the contract is initialized by submitted an array containing the following
    // strings. These must be provided as a SINGLE ARRAY of strings that do not
    // exceed the bytes32 data-limits:
    function initialize(bytes32 [] args) {
        
        // number of participants
        number_of_participants = stringToUInt(bytes32ToString(args[0]));

        // second is public keys
        for (uint i = 0; i < number_of_participants; i++) {
            public_keys[i] = bytes32ToString(args[i+1]);
        }
        
        // approved coin distribution
        for (uint j = 0; j < number_of_participants; j++) {
            coin_distribution[j] = bytes32ToUInt(args[j+(1+number_of_participants)]);
            coin_distribution_idx[i] = 0;
        }
        
    }
    
    
    function uploadProof(bytes32 [] args) returns (uint256) {
        
        uint argnum = 0;

        // desired coin distribution
        for (uint i = 0; i < number_of_participants; i++) {
            submitted_dist[i]         = bytes32ToUInt(args[argnum]);
            submitted_dist_bytes32[i] = args[argnum];
            argnum++;
        }

        // indexes submitted
        for (uint j = 0; j < number_of_participants; j++) {
            submitted_idx_bytes32[j] = args[argnum];
            submitted_idx[j]         = bytes32ToUInt(args[argnum]);
            argnum++;
        }

        // signatures submitted -- 3 values per entry
        // msg (hex) == sha256(msg)
        // r 
        // s 
        for (uint k = 0; k < number_of_participants; k++) {
            var generatedMessage = generateMessageHash(submitted_dist_bytes32[k], submitted_idx_bytes32[k]);
            bytes32 this_m = args[argnum];
            bytes32 this_r = args[argnum+1];
            bytes32 this_s = args[argnum+2];
            address my_add = stringToAddress(public_keys[k]);
            argnum += 3;
            
            // verify message signature effective
            var does_our_message_validate = validateMessage(my_add, this_m, this_r, this_s);
            
            return does_our_message_validate;
        }


        // verify that indexes are authorized for each signer
        
        
        // verify message signature
/*
        // verify that the indexes are >= than max_authorized 
        for (uint m = 0; m < number_of_participants; m++) {
            if (submitted_idx[m] < coin_distribution_idx[m]) { 
                return; 
            }
        }

        // verify that the signatures are valid
        return generateMessageHash();
*/

    }


    
    // address must be submitted as a string preceded by "0x..."
    // 
    // the value of v is either 27 or 28 for reasons that are not
    // particularly transparent to me at this point in time, so we 
    // test for both and return 1 if we get a match either time.
    function validateMessage(address add1, bytes32 m, bytes32 r, bytes32 s) returns (uint) { 
        if (ecrecover(m,28,r,s)==add1) { return 1; }
        if (ecrecover(m,27,r,s)==add1) { return 1; }
        return 0;
    }
    /*
        function validateMessage(address add1, bytes32 m, bytes32 r, bytes32 s) returns (uint) { 
        if (ecrecover(m,28,r,s)==add1) { return 1; }
        if (ecrecover(m,27,r,s)==add1) { return 1; }
        return 0;
    }
*/
    function generateMessageHash(bytes32 x, bytes32 y) returns (bytes32) { 
        var dist = bytes32ToString(x);
        var idx  = bytes32ToString(y);
        return sha256(dist, idx);
    }
/*
    function generateMessageHash(bytes32 [] args) returns (bytes32) { 
        var dist = bytes32ToString(args[0]);
        var idx  = bytes32ToString(args[1]);
        return sha256(dist, idx);
    }
*/

    function kill(){
        if (msg.sender == owner) suicide(msg.sender);
    }
    
    
    
    
    
    
    
    ////////////////////////
    // utility functions //
    ///////////////////////
    function bytes32ToUInt(bytes32 x) constant returns (uint) {
        return stringToUInt(bytes32ToString(x));
    }
    function bytes32ToString(bytes32 x) constant returns (string) {
        bytes memory bytesString = new bytes(32);
        uint charCount = 0;
        for (uint j = 0; j < 32; j++) {
            byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));
            if (char != 0) {
                bytesString[charCount] = char;
                charCount++;
            }
        }
        bytes memory bytesStringTrimmed = new bytes(charCount);
        for (j = 0; j < charCount; j++) {
            bytesStringTrimmed[j] = bytesString[j];
        }
        return string(bytesStringTrimmed);
    }

    function stringToUInt(string s) constant returns (uint result) {
        bytes memory b = bytes(s);
        uint i;
        result = 0;
        for (i = 0; i < b.length; i++) {
            uint c = uint(b[i]);
            if (c >= 48 && c <= 57) {
                result = result * 10 + (c - 48);
            }
        }
    }
    function stringToAddress(string _a) constant returns (address){
     bytes memory tmp = bytes(_a);
     uint160 iaddr = 0;
     uint160 b1;
     uint160 b2;
     for (uint i=2; i<2+2*20; i+=2){
         iaddr *= 256;
         b1 = uint160(tmp[i]);
         b2 = uint160(tmp[i+1]);
         if ((b1 >= 97)&&(b1 <= 102)) b1 -= 87;
         else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;
         if ((b2 >= 97)&&(b2 <= 102)) b2 -= 87;
         else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;
         iaddr += (b1*16+b2);
     }
     return address(iaddr);
    }

    
    
}





